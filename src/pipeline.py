import sys
import cv2
import os
from sys import platform
import argparse
import time
import progress.bar as progress_bar
import utils.graph_parser as gp

# Import OpenPose python wrapper
try:
    dir_path = os.path.dirname(os.path.realpath(__file__))
    # Windows Import
    if platform == "win32":
        sys.path.append(
            dir_path + '../openpose/build/python/openpose/Release'
        )
        path = os.environ['PATH'] + ';' + dir_path + '/../../x64/Release;' + dir_path + '/../../bin;'
        os.environ['PATH'] = path
        import pyopenpose as op
    else:
        # OSX/Linux
        sys.path.append('/usr/local/python')
        from openpose import pyopenpose as op
except ImportError as e:
    print('Error during openpose import!')
    raise e


def parse_config_params(arg_size: int):
    """
    Given the size of the arguments passed, parses the custom parameters
    passed as command line options, and returns a dictionary of
    parameters
    :param int arg_size: size of arguments
    :return dict: dictionary of parameters
    """
    parameters = dict()
    for i in range(0, arg_size):
        curr_keyword = args[1][i]
        # if the current keyword is not the last one
        if i != arg_size - 1:
            next_keyword = args[1][i + 1]
        else:
            next_keyword = '1'
        if '--' in curr_keyword:
            keyword = curr_keyword.replace('-', '')
            if keyword not in parameters:
                if '--' in next_keyword:
                    parameters[keyword] = '1'
                else:
                    parameters[keyword] = next_keyword
    return parameters


def write_json(obj, parameters: dict, frame_path: str, resolution: str,
               index: int = None):
    """
    Given a Datum obj, a dict of parameters, an frame path, a resolution
    and optionally an index, parses the keypoints generated by OpenPose
    and saves the values as JSON
    :param obj: Datum obj(look to OpenPose doc)
    :param dict parameters: dictionary of parameters parsed from cmd
    :param str frame_path: path of a frame/image
    :param str resolution: resolution of the video/image
    :param int index: counter of frames, used for file naming in case of
    a video processing
    """
    # Pose(default)
    keypts_list = [obj.poseKeypoints]
    node_type = ['pose']

    if keypts_list[0].size > 1:
        # Face
        if 'face' in parameters:
            keypts_list.append(obj.faceKeypoints)
            node_type.append('face')
        # Hand
        if 'hand' in parameters:
            keypts_list.append(obj.handKeypoints[0])
            keypts_list.append(obj.handKeypoints[1])
            node_type.append('hand')
        # Request to write the output as json
        gp.points_to_json(keypts_list,
                          args[0].write_json,
                          resolution,
                          node_type,
                          str(os.path.splitext(frame_path)[0].split('/')[-1]),
                          index)


def display_img(obj):
    """
    Given a Datum object (OpenPose doc for more info), displays the
    resulting image processed by OpenPose
    :param obj: Datum object
    :return None: In order to stop the
    """
    cv2.imshow("OpenPose Image", obj.cvOutputData)
    key = cv2.waitKey(15)
    if key == 27:
        return None


def process_images(image_paths: str):
    """
    Given a path to a folder containing images, applies OpenPose image
    processing to each image in the path, and perform other operations
    based on the flags passed as arguments in command line
    :param image_paths: path to a folder containing images
    """
    bar = progress_bar.IncrementalBar(
        'Applying OpenPose recognition: ',
        max=len(image_paths),
        suffix='%(index)d/%(max)d'
    )
    bar.start()
    start = time.time()
    for image_path in image_paths:
        datum = op.Datum()
        image_to_process = cv2.imread(image_path)
        datum.cvInputData = image_to_process
        opWrapper.emplaceAndPop([datum])
        bar.next()
        if args[0].display == '1':
            display_img(datum)
        if args[0].write_json is not None:
            write_json(datum, params, image_path, image_to_process.shape)
    bar.finish()
    end = time.time()
    print("Image processing successfully finished. Total time: {:.2f}s"
          .format(end - start))


def process_video(video_path: str):
    """
    Given a path to a video, applies OpenPose image processing to each
    frame of the video, and perform other operations based on the flags
    passed as arguments in command line
    :param str video_path: a path to
    :return:
    """
    video = cv2.VideoCapture(video_path)
    n_frames = int(video.get(cv2.CAP_PROP_FRAME_COUNT))
    if n_frames == 0:
        raise FileNotFoundError(video_path + ' not found!')
    bar = progress_bar.IncrementalBar(
        'Applying OpenPose recognition: ',
        max=n_frames,
        suffix='%(index)d/%(max)d'
    )
    start = time.time()
    bar.start()
    frame_index = 0
    datum = op.Datum()
    while video.isOpened():
        ret, video_frame = video.read()
        if ret:
            datum.cvInputData = video_frame
            opWrapper.emplaceAndPop([datum])
            bar.next()
            if args[0].display == '1':
                display_img(datum)
            if args[0].write_json is not None:
                write_json(datum,
                           params,
                           video_path,
                           video_frame.shape,
                           frame_index)
                frame_index += 1
    bar.finish()
    end = time.time()
    print("Video processing successfully finished. Total time: {:.2f}s"
          .format(end - start))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    # default params
    parser.add_argument('--image_dir')
    parser.add_argument('--video')
    parser.add_argument('--display', default='0')
    parser.add_argument('--write_json')
    args = parser.parse_known_args()

    # Custom params
    params = parse_config_params(len(args[1]))
    params["model_folder"] = "../openpose/models/"

    # Starting OpenPose
    opWrapper = op.WrapperPython()
    opWrapper.configure(params)
    opWrapper.start()

    # video processing
    if args[0].video is not None and args[0].image_dir is None:
        process_video(args[0].video)
    # image processing
    elif args[0].image_dir is not None and args[0].video is None:
        paths = op.get_images_on_directory(args[0].image_dir)
        process_images(paths)
    else:
        raise IndexError('Usage: ' + os.path.basename(__file__) +
                         ' --image_dir [path] or --video [path]')
