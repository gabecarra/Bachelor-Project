import json
import os
import glob
import image_info
import edges_set
import progress.bar as progress_bar


def get_pose_edges(del_nodes: list, node_type: str = 'pose') -> list:
    """
    Given a list of nodes to be deleted and the type of nodes(pose, hand or face), takes the edge set specified by
    node_type, removes the edges specified in del_nodes list, and return the resulting set of edges.
    :param list del_nodes: Nodes to be deleted
    :param str node_type: Type of nodes needed ('pose', 'hand' or 'face'). Default: 'pose'
    :return list: List containing only the edges not specified in del_nodes
    """
    edges_list = edges_set.get_edges(node_type)
    for del_node in del_nodes:
        curr_node = find_node(edges_list, del_node)
        if curr_node is not None:
            for linked_node_id in curr_node['linked_nodes']:
                linked_node_index = find_index(edges_list, linked_node_id)
                if linked_node_index is not None:
                    edges_list[linked_node_index]['linked_nodes'].remove(del_node)
            edges_list.remove(curr_node)
    return edges_list


def parse_keypoints(key_graph: dict, keypoints: list, id_count: int, keypoint_type: str = 'pose') -> list:
    """
    Given a graph represented as a dictionary, keypoints taken from a JSON, the id of the given graph, the type of
    keypoints(pose,hand, face), and a flag for right an left hand, parse the keypoints by creating nodes with the
    following attributes: {x, y, confidence}. Returns a list of keypoints parsed.
    :param dict key_graph: Graph represented as a dictionary
    :param list keypoints: List of keypoints taken from OpenPose JSON
    :param int id_count: Counter for keeping track of the number of people in the data
    :param str keypoint_type: Type of keypoints we are dealing with ('pose', 'handl', 'handr',face')
    :return list: List of structured person keypoints, represented as a dictionary
    """
    out = []
    orientation = 'right' if keypoint_type == 'handr' else 'left'
    n_keypoints = 75
    if keypoint_type == 'hand':
        n_keypoints = 63
    elif keypoint_type == 'face':
        n_keypoints = 210
    for i in range(0, n_keypoints, 3):
        x = keypoints[i]
        y = keypoints[i + 1]
        confidence = keypoints[i + 2]
        node_id = int(i / 3)
        if x != 0 or y != 0:
            if keypoint_type in ['handl', 'handr']:
                key_graph['people'][id_count]['nodes']['hands'][orientation].append(
                    dict(id=node_id, x=x, y=y, confidence=confidence))
            else:
                key_graph['people'][id_count]['nodes'][keypoint_type].append(
                    dict(id=node_id, x=x, y=y, confidence=confidence))
        else:
            out.append(node_id)
    return out


def find_node(node_list: list, node_id: int) -> dict or None:
    """
    Given a list of nodes and the id of a node, returns the given node if it exists, otherwise None
    :param list node_list: List of nodes
    :param int node_id: The id of a node
    :return dict or None: The node with the given id, if it is found, otherwise None
    """
    for node in node_list:
        if node['ref_node'] == node_id:
            return node
    return None


def find_index(node_list: list, node_id: int) -> int or None:
    """
    Given a list of nodes, and the id of a node, returns the position of the given node inside the list if it exists,
    otherwise None
    :param list node_list: List of nodes
    :param int node_id: The id of a node
    :return int: Position of the node with the given id in the list, otherwise None
    """
    for i in range(0, len(node_list)):
        if node_list[i]['ref_node'] == node_id:
            return i
    return None


def parse_graph(open_pose_data: dict, file_code: str, path: str) -> dict:
    """
    Given an OpenPose dataset, the codename of the file, and the path to the dataset returns the
    dataset parsed as a graph(JSON)
    :param dict open_pose_data: Dictionary containing all the data generated by OpenPose
    :param str file_code: Codename of a file (es. 099945052)
    :param str path: Path where the data is located
    :return dict: Graph represented as a dictionary
    """
    id_count = 0
    out_graph = dict(code_name=file_code,
                     resolution=image_info.get_resolution(path + '/out_res/' + file_code + '.txt'),
                     people=[])
    for person in open_pose_data['people']:
        # Get keypoints
        pose_keypoints = person['pose_keypoints_2d']
        handl_keypoints = person['hand_left_keypoints_2d']
        handr_keypoints = person['hand_right_keypoints_2d']
        face_keypoints = person['face_keypoints_2d']
        # Create a new structure
        out_graph['people'].append(
            dict(id=id_count, nodes=dict(pose=[], hands=dict(left=[], right=[]), face=[]),
                 edges=dict(pose=[], hands=dict(left=[], right=[]), face=[])))
        # body pose parsing
        null_pose_nodes = parse_keypoints(out_graph, pose_keypoints, id_count)
        # hands pose parsing
        null_handl_nodes = parse_keypoints(out_graph, handl_keypoints, id_count, 'handl')
        null_handr_nodes = parse_keypoints(out_graph, handr_keypoints, id_count, 'handr')
        # face pose parsing
        null_face_nodes = parse_keypoints(out_graph, face_keypoints, id_count, 'face')
        # set edges and remove null nodes and edges from the nodes
        out_graph['people'][id_count]['edges']['pose'] = get_pose_edges(null_pose_nodes)
        out_graph['people'][id_count]['edges']['hands']['left'] = get_pose_edges(null_handl_nodes, 'hand')
        out_graph['people'][id_count]['edges']['hands']['right'] = get_pose_edges(null_handr_nodes, 'hand')
        out_graph['people'][id_count]['edges']['face'] = get_pose_edges(null_face_nodes, 'face')
        id_count += 1
    return out_graph


def generate_json(path):
    """
    Given a path to a folder containing JSON files generated by OpenPose, parse the files and generate a set of graphs
    based on the data set given, and save them as JSON in '../out/'
    :param str path: path containing data generated by OpenPose
    """
    # Create an output directory, if it doesn't exists
    try:
        os.mkdir(path + '/out/')
    except FileExistsError:
        print(path + '/out/already exists...')
        pass

    files = glob.glob(path + '*.json')
    bar = progress_bar.IncrementalBar('Parsing files: ', max=len(files), suffix='%(index)d/%(max)d, Elapsed: %('
                                                                                'elapsed)ds')
    for file in files:
        file_name = file.split('/')[-1]
        with open(file) as json_file:
            data = json.load(json_file)
            graph = parse_graph(data, file_name.split('.')[0].split('_')[0], path)
            with open(path + '/out/' + file_name, 'w') as out_file:
                json.dump(graph, out_file, indent=2)
        bar.next()
    bar.finish()
